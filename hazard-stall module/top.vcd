$date
	Tue Nov  9 08:03:19 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module top_tb $end
$var reg 1 ! clk $end
$scope module top $end
$var wire 1 ! clk $end
$var wire 1 " pc_src $end
$var wire 1 # zero_xm $end
$var wire 1 $ zero $end
$var wire 32 % simm [31:0] $end
$var wire 32 & rt_value_xm [31:0] $end
$var wire 32 ' rt_value_dx [31:0] $end
$var wire 32 ( rt_value [31:0] $end
$var wire 5 ) rt_address_dx [4:0] $end
$var wire 32 * rs_value_dx [31:0] $end
$var wire 32 + rs_value [31:0] $end
$var wire 5 , rs_address_dx [4:0] $end
$var wire 1 - reg_write_xm $end
$var wire 1 . reg_write_mw $end
$var wire 1 / reg_write_dx $end
$var wire 1 0 reg_write $end
$var wire 1 1 reg_dst_dx $end
$var wire 1 2 reg_dst $end
$var wire 32 3 read_data_mw [31:0] $end
$var wire 32 4 read_data [31:0] $end
$var wire 32 5 rd_value [31:0] $end
$var wire 5 6 rd_address_xm [4:0] $end
$var wire 5 7 rd_address_mw [4:0] $end
$var wire 5 8 rd_address_dx [4:0] $end
$var wire 5 9 rd_address [4:0] $end
$var wire 32 : pc4_fd [31:0] $end
$var wire 32 ; pc4_dx [31:0] $end
$var wire 32 < pc4 [31:0] $end
$var wire 32 = pc [31:0] $end
$var wire 4 > op [3:0] $end
$var wire 32 ? mux_jump_out [31:0] $end
$var wire 32 @ mux_branch_out [31:0] $end
$var wire 1 A mem_write_xm $end
$var wire 1 B mem_write_dx $end
$var wire 1 C mem_write $end
$var wire 1 D mem_to_reg_xm $end
$var wire 1 E mem_to_reg_mw $end
$var wire 1 F mem_to_reg_dx $end
$var wire 1 G mem_to_reg $end
$var wire 1 H mem_read_xm $end
$var wire 1 I mem_read_dx $end
$var wire 1 J mem_read $end
$var wire 28 K jump_address28 [27:0] $end
$var wire 32 L jump_address [31:0] $end
$var wire 1 M jump $end
$var wire 32 N instruction_fd [31:0] $end
$var wire 32 O instruction [31:0] $end
$var wire 32 P imm_dx [31:0] $end
$var wire 32 Q imm [31:0] $end
$var wire 1 R hazard $end
$var wire 1 S c_reg_write $end
$var wire 1 T c_reg_dst $end
$var wire 1 U c_mem_write $end
$var wire 1 V c_mem_to_reg $end
$var wire 1 W c_mem_read $end
$var wire 1 X c_jump $end
$var wire 1 Y c_branch $end
$var wire 1 Z c_alu_src $end
$var wire 2 [ c_alu_op [1:0] $end
$var wire 1 \ branch_xm $end
$var wire 1 ] branch_dx $end
$var wire 32 ^ branch_address_xm [31:0] $end
$var wire 32 _ branch_address [31:0] $end
$var wire 1 ` branch $end
$var wire 1 a alu_src_dx $end
$var wire 1 b alu_src $end
$var wire 32 c alu_result_xm [31:0] $end
$var wire 32 d alu_result_mw [31:0] $end
$var wire 32 e alu_result [31:0] $end
$var wire 2 f alu_op_dx [1:0] $end
$var wire 2 g alu_op [1:0] $end
$var wire 32 h alu_b [31:0] $end
$scope module Haz $end
$var wire 5 i rs_addr [4:0] $end
$var wire 5 j rt_addr [4:0] $end
$var wire 1 - reg_write_xm $end
$var wire 1 . reg_write_mw $end
$var wire 5 k rd_register_xm [4:0] $end
$var wire 5 l rd_register_mw [4:0] $end
$var reg 1 R hazard $end
$upscope $end
$scope module adder4 $end
$var wire 32 m in2 [31:0] $end
$var wire 32 n out [31:0] $end
$var wire 32 o in1 [31:0] $end
$upscope $end
$scope module adderimm $end
$var wire 32 p out [31:0] $end
$var wire 32 q in2 [31:0] $end
$var wire 32 r in1 [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 $ zero $end
$var wire 4 s op [3:0] $end
$var wire 32 t b [31:0] $end
$var wire 32 u a [31:0] $end
$var reg 32 v c [31:0] $end
$upscope $end
$scope module alucontrol $end
$var wire 6 w func [5:0] $end
$var wire 2 x alu_op [1:0] $end
$var reg 4 y alu_control [3:0] $end
$upscope $end
$scope module control $end
$var wire 6 z opcode [5:0] $end
$var reg 2 { alu_op [1:0] $end
$var reg 1 Z alu_src $end
$var reg 1 Y branch $end
$var reg 1 X jump $end
$var reg 1 W mem_read $end
$var reg 1 V mem_to_reg $end
$var reg 1 U mem_write $end
$var reg 1 T reg_dst $end
$var reg 1 S reg_write $end
$upscope $end
$scope module dmem $end
$var wire 1 ! clk $end
$var wire 32 | write_data [31:0] $end
$var wire 32 } read_data [31:0] $end
$var wire 1 A mem_write $end
$var wire 1 H mem_read $end
$var wire 32 ~ address [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 !" read_data [31:0] $end
$var wire 32 "" address [31:0] $end
$var integer 32 #" i [31:0] $end
$upscope $end
$scope module mux_alu $end
$var wire 32 $" out [31:0] $end
$var wire 32 %" in2 [31:0] $end
$var wire 32 &" in1 [31:0] $end
$var wire 1 a flag $end
$upscope $end
$scope module mux_branch $end
$var wire 1 " flag $end
$var wire 32 '" in1 [31:0] $end
$var wire 32 (" out [31:0] $end
$var wire 32 )" in2 [31:0] $end
$upscope $end
$scope module mux_jump $end
$var wire 32 *" in1 [31:0] $end
$var wire 32 +" in2 [31:0] $end
$var wire 32 ," out [31:0] $end
$var wire 1 M flag $end
$upscope $end
$scope module mux_mem $end
$var wire 32 -" out [31:0] $end
$var wire 32 ." in2 [31:0] $end
$var wire 32 /" in1 [31:0] $end
$var wire 1 E flag $end
$upscope $end
$scope module mux_regfile $end
$var wire 5 0" out [4:0] $end
$var wire 5 1" in2 [4:0] $end
$var wire 5 2" in1 [4:0] $end
$var wire 1 1 flag $end
$upscope $end
$scope module pc_block $end
$var wire 1 ! clk $end
$var wire 32 3" in [31:0] $end
$var wire 1 4" write $end
$var wire 32 5" out [31:0] $end
$var reg 32 6" pc [31:0] $end
$upscope $end
$scope module r1 $end
$var wire 1 ! clk $end
$var wire 32 7" in [31:0] $end
$var wire 1 8" write $end
$var reg 32 9" out [31:0] $end
$upscope $end
$scope module r2 $end
$var wire 1 ! clk $end
$var wire 32 :" in [31:0] $end
$var wire 1 ;" write $end
$var reg 32 <" out [31:0] $end
$upscope $end
$scope module r3 $end
$var wire 1 ! clk $end
$var wire 32 =" in [31:0] $end
$var reg 32 >" out [31:0] $end
$upscope $end
$scope module r4 $end
$var wire 1 ! clk $end
$var wire 1 2 in $end
$var reg 1 1 out $end
$upscope $end
$scope module r5 $end
$var wire 1 ! clk $end
$var wire 1 ` in $end
$var reg 1 ] out $end
$upscope $end
$scope module r6 $end
$var wire 1 ! clk $end
$var wire 1 J in $end
$var reg 1 I out $end
$upscope $end
$scope module r7 $end
$var wire 1 ! clk $end
$var wire 1 G in $end
$var reg 1 F out $end
$upscope $end
$scope module r8 $end
$var wire 1 ! clk $end
$var wire 2 ?" in [1:0] $end
$var reg 2 @" out [1:0] $end
$upscope $end
$scope module r9 $end
$var wire 1 ! clk $end
$var wire 1 C in $end
$var reg 1 B out $end
$upscope $end
$scope module ra $end
$var wire 1 ! clk $end
$var wire 1 b in $end
$var reg 1 a out $end
$upscope $end
$scope module rb $end
$var wire 1 ! clk $end
$var wire 1 0 in $end
$var reg 1 / out $end
$upscope $end
$scope module rc $end
$var wire 1 ! clk $end
$var wire 32 A" in [31:0] $end
$var reg 32 B" out [31:0] $end
$upscope $end
$scope module rd $end
$var wire 1 ! clk $end
$var wire 32 C" in [31:0] $end
$var reg 32 D" out [31:0] $end
$upscope $end
$scope module re $end
$var wire 1 ! clk $end
$var wire 32 E" in [31:0] $end
$var reg 32 F" out [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 32 G" rd_value [31:0] $end
$var wire 5 H" rs_address [4:0] $end
$var wire 32 I" rs_value [31:0] $end
$var wire 5 J" rt_address [4:0] $end
$var wire 32 K" rt_value [31:0] $end
$var wire 1 . reg_write $end
$var wire 5 L" rd_address [4:0] $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 M" in [4:0] $end
$var reg 5 N" out [4:0] $end
$upscope $end
$scope module rg $end
$var wire 1 ! clk $end
$var wire 5 O" in [4:0] $end
$var reg 5 P" out [4:0] $end
$upscope $end
$scope module rh $end
$var wire 1 ! clk $end
$var wire 1 ] in $end
$var reg 1 \ out $end
$upscope $end
$scope module ri $end
$var wire 1 ! clk $end
$var wire 1 I in $end
$var reg 1 H out $end
$upscope $end
$scope module rj $end
$var wire 1 ! clk $end
$var wire 1 F in $end
$var reg 1 D out $end
$upscope $end
$scope module rk $end
$var wire 1 ! clk $end
$var wire 1 B in $end
$var reg 1 A out $end
$upscope $end
$scope module rl $end
$var wire 1 ! clk $end
$var wire 1 / in $end
$var reg 1 - out $end
$upscope $end
$scope module rm $end
$var wire 1 ! clk $end
$var wire 32 Q" in [31:0] $end
$var reg 32 R" out [31:0] $end
$upscope $end
$scope module rn $end
$var wire 1 ! clk $end
$var wire 1 $ in $end
$var reg 1 # out $end
$upscope $end
$scope module ro $end
$var wire 1 ! clk $end
$var wire 32 S" in [31:0] $end
$var reg 32 T" out [31:0] $end
$upscope $end
$scope module rp $end
$var wire 1 ! clk $end
$var wire 5 U" in [4:0] $end
$var reg 5 V" out [4:0] $end
$upscope $end
$scope module rq $end
$var wire 1 ! clk $end
$var wire 32 W" in [31:0] $end
$var reg 32 X" out [31:0] $end
$upscope $end
$scope module rr $end
$var wire 1 ! clk $end
$var wire 1 D in $end
$var reg 1 E out $end
$upscope $end
$scope module rs $end
$var wire 1 ! clk $end
$var wire 1 - in $end
$var reg 1 . out $end
$upscope $end
$scope module rt $end
$var wire 1 ! clk $end
$var wire 32 Y" in [31:0] $end
$var reg 32 Z" out [31:0] $end
$upscope $end
$scope module ru $end
$var wire 1 ! clk $end
$var wire 32 [" in [31:0] $end
$var reg 32 \" out [31:0] $end
$upscope $end
$scope module rv $end
$var wire 1 ! clk $end
$var wire 5 ]" in [4:0] $end
$var reg 5 ^" out [4:0] $end
$upscope $end
$scope module rw $end
$var wire 1 ! clk $end
$var wire 5 _" in [4:0] $end
$var reg 5 `" out [4:0] $end
$upscope $end
$scope module signextend $end
$var wire 16 a" in [15:0] $end
$var wire 32 b" out [31:0] $end
$upscope $end
$scope module sll_imm $end
$var wire 32 c" in [31:0] $end
$var wire 32 d" out [31:0] $end
$upscope $end
$scope module sll_jump $end
$var wire 26 e" in [25:0] $end
$var wire 28 f" out [27:0] $end
$upscope $end
$scope module temp1 $end
$var wire 1 R flag $end
$var wire 1 T in1 $end
$var wire 1 g" in2 $end
$var wire 1 2 out $end
$upscope $end
$scope module temp2 $end
$var wire 1 R flag $end
$var wire 1 X in1 $end
$var wire 1 h" in2 $end
$var wire 1 M out $end
$upscope $end
$scope module temp3 $end
$var wire 1 R flag $end
$var wire 1 Y in1 $end
$var wire 1 i" in2 $end
$var wire 1 ` out $end
$upscope $end
$scope module temp4 $end
$var wire 1 R flag $end
$var wire 1 W in1 $end
$var wire 1 j" in2 $end
$var wire 1 J out $end
$upscope $end
$scope module temp5 $end
$var wire 1 R flag $end
$var wire 1 V in1 $end
$var wire 1 k" in2 $end
$var wire 1 G out $end
$upscope $end
$scope module temp6 $end
$var wire 1 R flag $end
$var wire 2 l" in1 [1:0] $end
$var wire 2 m" in2 [1:0] $end
$var wire 2 n" out [1:0] $end
$upscope $end
$scope module temp7 $end
$var wire 1 R flag $end
$var wire 1 U in1 $end
$var wire 1 o" in2 $end
$var wire 1 C out $end
$upscope $end
$scope module temp8 $end
$var wire 1 R flag $end
$var wire 1 Z in1 $end
$var wire 1 p" in2 $end
$var wire 1 b out $end
$upscope $end
$scope module temp9 $end
$var wire 1 R flag $end
$var wire 1 S in1 $end
$var wire 1 q" in2 $end
$var wire 1 0 out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0q"
0p"
0o"
b10 n"
b0 m"
b10 l"
0k"
0j"
0i"
0h"
0g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
bx ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b10 ?"
b0 >"
b0 ="
b0 <"
1;"
b100000000010000000000000001010 :"
b0 9"
18"
b100 7"
b0 6"
b0 5"
14"
b100 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b100 ,"
b0 +"
b100 *"
b0 )"
b100 ("
b100 '"
b0 &"
b0 %"
b0 $"
b100000000 #"
b0 ""
b100000000010000000000000001010 !"
b0 ~
bx }
b0 |
b10 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b100 n
b100 m
b0 l
b0 k
b0 j
b0 i
b0 h
b10 g
b0 f
b0 e
b0 d
b0 c
0b
0a
0`
b0 _
b0 ^
0]
0\
b10 [
0Z
0Y
0X
0W
0V
0U
1T
1S
0R
b0 Q
b0 P
b100000000010000000000000001010 O
b0 N
0M
b0 L
b0 K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
b100 @
b100 ?
b0 >
b0 =
b100 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
bx 4
b0 3
12
01
10
0/
0.
0-
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
1$
0#
0"
0!
$end
#5
b11 g
b11 ?"
b11 n"
1b
02
b11 [
b11 {
b11 l"
1Z
0T
b1000 ?
b1000 ,"
b1000 3"
b1000000000000000101000 L
b1000000000000000101000 +"
b1000000000000000101000 K
b1000000000000000101000 f"
b100000000010010000000000001000 O
b100000000010010000000000001000 !"
b100000000010010000000000001000 :"
b1000 @
b1000 ("
b1000 *"
b1000 j
b1000 M"
b10000000000000001010 e"
bx (
bx E"
bx K"
b1000 J"
b1010 Q
b1010 A"
b1010 b"
b1010 a"
b1000 z
b1000 <
b1000 n
b1000 '"
b1000 7"
b100 =
b100 o
b100 ""
b100 5"
b100 6"
b100 :
b100 9"
b100 ="
b100000000010000000000000001010 N
b100000000010000000000000001010 <"
11
b10 f
b10 x
b10 @"
1/
1#
bx 3
bx ."
bx \"
1!
#10
0!
#15
0$
b1010 e
b1010 v
b1010 S"
b1001000000000000100000 L
b1001000000000000100000 +"
b1001000000000000100000 K
b1001000000000000100000 f"
b1100 ?
b1100 ,"
b1100 3"
b101000 %
b101000 q
b101000 d"
b1010 w
b1010 h
b1010 t
b1010 $"
b1000 9
b1000 0"
b1000 U"
b1001 j
b1001 M"
b10010000000000001000 e"
b1001 J"
b1000 Q
b1000 A"
b1000 b"
b1000 a"
b1000010010101000000100101 O
b1000010010101000000100101 !"
b1000010010101000000100101 :"
b1100 @
b1100 ("
b1100 *"
1-
b1000 )
b1000 2"
b1000 N"
bx '
bx &"
bx F"
bx W"
b1010 P
b1010 %"
b1010 B"
b1010 c"
1a
b11 f
b11 x
b11 @"
01
b101100 _
b101100 p
b101100 Q"
b100 ;
b100 r
b100 >"
b100000000010010000000000001000 N
b100000000010010000000000001000 <"
b1000 :
b1000 9"
b1000 ="
b1100 <
b1100 n
b1100 '"
b1100 7"
b1000 =
b1000 o
b1000 ""
b1000 5"
b1000 6"
1!
#20
0!
#25
00
b0 g
b0 ?"
b0 n"
0b
0;"
08"
04"
1R
b10 [
b10 {
b10 l"
0Z
1T
b1000 e
b1000 v
b1000 S"
b10000 ?
b10000 ,"
b10000 3"
b100001001010100000010010100 L
b100001001010100000010010100 +"
b100001001010100000010010100 K
b100001001010100000010010100 f"
b100000000010010000000000000001 O
b100000000010010000000000000001 !"
b100000000010010000000000000001 :"
b10000 @
b10000 ("
b10000 *"
b1000 i
b1000 _"
b1010 O"
b1000010010101000000100101 e"
bx +
bx C"
bx I"
b1000 H"
b101000000100101 Q
b101000000100101 A"
b101000000100101 b"
b101000000100101 a"
b0 z
b100000 %
b100000 q
b100000 d"
b1000 h
b1000 t
b1000 $"
b1000 w
b1001 9
b1001 0"
b1001 U"
b10000 <
b10000 n
b10000 '"
b10000 7"
b1100 =
b1100 o
b1100 ""
b1100 5"
b1100 6"
b1100 :
b1100 9"
b1100 ="
b1000010010101000000100101 N
b1000010010101000000100101 <"
b101000 _
b101000 p
b101000 Q"
b1000 ;
b1000 r
b1000 >"
b1000 P
b1000 %"
b1000 B"
b1000 c"
b1001 )
b1001 2"
b1001 N"
b101100 ^
b101100 )"
b101100 R"
0#
b1010 c
b1010 ~
b1010 T"
b1010 Y"
b1000 6
b1000 k
b1000 V"
b1000 ]"
bx &
bx |
bx X"
1.
1!
#30
0!
#35
x$
bx e
bx v
bx S"
b1010 5
b1010 -"
b1010 G"
b10100000010010100 %
b10100000010010100 q
b10100000010010100 d"
b100101 w
bx h
bx t
bx $"
b1000 7
b1000 l
b1000 L"
b1000 ^"
b1010 d
b1010 /"
b1010 Z"
b1001 6
b1001 k
b1001 V"
b1001 ]"
b1000 c
b1000 ~
b1000 T"
b1000 Y"
b101000 ^
b101000 )"
b101000 R"
b1000 ,
b1000 `"
b1010 8
b1010 1"
b1010 P"
bx *
bx u
bx D"
b101000000100101 P
b101000000100101 %"
b101000000100101 B"
b101000000100101 c"
0/
0a
b0 f
b0 x
b0 @"
b10100000010100000 _
b10100000010100000 p
b10100000010100000 Q"
b1100 ;
b1100 r
b1100 >"
1!
#40
b1010 +
b1010 C"
b1010 I"
0!
#45
b1000 5
b1000 -"
b1000 G"
b1010 *
b1010 u
b1010 D"
0-
b10100000010100000 ^
b10100000010100000 )"
b10100000010100000 R"
x#
bx c
bx ~
bx T"
bx Y"
b1000 d
b1000 /"
b1000 Z"
b1001 7
b1001 l
b1001 L"
b1001 ^"
1!
#50
b1000 (
b1000 E"
b1000 K"
0!
#55
12
b10 g
b10 ?"
b10 n"
10
0$
b10010 e
b10010 v
b10010 S"
1;"
18"
14"
0R
bx 5
bx -"
bx G"
b1000 h
b1000 t
b1000 $"
bx d
bx /"
bx Z"
0.
b1000 '
b1000 &"
b1000 F"
b1000 W"
1!
#60
0!
#65
b1010 e
b1010 v
b1010 S"
b11 g
b11 ?"
b11 n"
1b
02
b11 [
b11 {
b11 l"
1Z
0T
b101 >
b101 s
b101 y
b10100 ?
b10100 ,"
b10100 3"
b1001000000000000000100 L
b1001000000000000000100 +"
b1001000000000000000100 K
b1001000000000000000100 f"
b1000010000100000000100000 O
b1000010000100000000100000 !"
b1000010000100000000100000 :"
b10100 @
b10100 ("
b10100 *"
b0 i
b0 _"
b0 O"
b10010000000000000001 e"
b0 +
b0 C"
b0 I"
b0 H"
b1 Q
b1 A"
b1 b"
b1 a"
b1000 z
b1010 9
b1010 0"
b1010 U"
b10100 <
b10100 n
b10100 '"
b10100 7"
b10000 =
b10000 o
b10000 ""
b10000 5"
b10000 6"
b10000 :
b10000 9"
b10000 ="
b100000000010010000000000000001 N
b100000000010010000000000000001 <"
11
b10 f
b10 x
b10 @"
1/
0#
b10010 c
b10010 ~
b10010 T"
b10010 Y"
b1000 &
b1000 |
b1000 X"
1!
#70
0!
#75
b10 g
b10 ?"
b10 n"
0b
12
b10 [
b10 {
b10 l"
0Z
1T
b1 e
b1 v
b1 S"
b0 >
b0 s
b0 y
b100001000010000000010000000 L
b100001000010000000010000000 +"
b100001000010000000010000000 K
b100001000010000000010000000 f"
b11000 ?
b11000 ,"
b11000 3"
b10010 5
b10010 -"
b10010 G"
b100 %
b100 q
b100 d"
b1 w
b1 h
b1 t
b1 $"
b1001 9
b1001 0"
b1001 U"
b1000 j
b1000 i
b1000 _"
b1000 O"
b1000 M"
b1000010000100000000100000 e"
b1010 (
b1010 E"
b1010 K"
b1000 J"
b1010 +
b1010 C"
b1010 I"
b1000 H"
b100000000100000 Q
b100000000100000 A"
b100000000100000 b"
b100000000100000 a"
b0 z
b1000010100101100000100101 O
b1000010100101100000100101 !"
b1000010100101100000100101 :"
b11000 @
b11000 ("
b11000 *"
b10010 d
b10010 /"
b10010 Z"
b1010 6
b1010 k
b1010 V"
b1010 ]"
b1010 c
b1010 ~
b1010 T"
b1010 Y"
1-
b0 ,
b0 `"
b0 8
b0 1"
b0 P"
b0 *
b0 u
b0 D"
b1 P
b1 %"
b1 B"
b1 c"
1a
b11 f
b11 x
b11 @"
01
b10100 _
b10100 p
b10100 Q"
b10000 ;
b10000 r
b10000 >"
b1000010000100000000100000 N
b1000010000100000000100000 <"
b10100 :
b10100 9"
b10100 ="
b11000 <
b11000 n
b11000 '"
b11000 7"
b10100 =
b10100 o
b10100 ""
b10100 5"
b10100 6"
1!
#80
0!
#85
02
b0 g
b0 ?"
b0 n"
00
0;"
08"
04"
1R
b10100 e
b10100 v
b10100 S"
b11100 ?
b11100 ,"
b11100 3"
b100001010010110000010010100 L
b100001010010110000010010100 +"
b100001010010110000010010100 K
b100001010010110000010010100 f"
b0 O
b0 !"
b0 :"
b11100 @
b11100 ("
b11100 *"
b1010 j
b1011 O"
b1010 M"
b1000010100101100000100101 e"
bx (
bx E"
bx K"
b1010 J"
b101100000100101 Q
b101100000100101 A"
b101100000100101 b"
b101100000100101 a"
b10000000010000000 %
b10000000010000000 q
b10000000010000000 d"
b1010 h
b1010 t
b1010 $"
b100000 w
b1000 9
b1000 0"
b1000 U"
b1010 5
b1010 -"
b1010 G"
b11100 <
b11100 n
b11100 '"
b11100 7"
b11000 =
b11000 o
b11000 ""
b11000 5"
b11000 6"
b11000 :
b11000 9"
b11000 ="
b1000010100101100000100101 N
b1000010100101100000100101 <"
b10000000010010100 _
b10000000010010100 p
b10000000010010100 Q"
b10100 ;
b10100 r
b10100 >"
11
b10 f
b10 x
b10 @"
0a
b100000000100000 P
b100000000100000 %"
b100000000100000 B"
b100000000100000 c"
b1010 *
b1010 u
b1010 D"
b1010 '
b1010 &"
b1010 F"
b1010 W"
b1000 )
b1000 2"
b1000 N"
b1000 8
b1000 1"
b1000 P"
b1000 ,
b1000 `"
b10100 ^
b10100 )"
b10100 R"
b1 c
b1 ~
b1 T"
b1 Y"
b1001 6
b1001 k
b1001 V"
b1001 ]"
1.
b1010 d
b1010 /"
b1010 Z"
b1010 7
b1010 l
b1010 L"
b1010 ^"
1!
#90
b1010 (
b1010 E"
b1010 K"
0!
#95
b1 5
b1 -"
b1 G"
b10110000010010100 %
b10110000010010100 q
b10110000010010100 d"
b100101 w
b1010 9
b1010 0"
b1010 U"
b1001 7
b1001 l
b1001 L"
b1001 ^"
b1 d
b1 /"
b1 Z"
b1010 &
b1010 |
b1010 X"
b1000 6
b1000 k
b1000 V"
b1000 ]"
b10100 c
b10100 ~
b10100 T"
b10100 Y"
b10000000010010100 ^
b10000000010010100 )"
b10000000010010100 R"
b1011 8
b1011 1"
b1011 P"
b1010 )
b1010 2"
b1010 N"
b101100000100101 P
b101100000100101 %"
b101100000100101 B"
b101100000100101 c"
0/
b0 f
b0 x
b0 @"
01
b10110000010101100 _
b10110000010101100 p
b10110000010101100 Q"
b11000 ;
b11000 r
b11000 >"
1!
#100
0!
#105
b10100 5
b10100 -"
b10100 G"
0-
b10110000010101100 ^
b10110000010101100 )"
b10110000010101100 R"
b1010 6
b1010 k
b1010 V"
b1010 ]"
b10100 d
b10100 /"
b10100 Z"
b1000 7
b1000 l
b1000 L"
b1000 ^"
1!
#110
b10100 +
b10100 C"
b10100 I"
0!
#115
12
b10 g
b10 ?"
b10 n"
10
1;"
18"
14"
0R
b11110 e
b11110 v
b11110 S"
b1010 7
b1010 l
b1010 L"
b1010 ^"
0.
b10100 *
b10100 u
b10100 D"
1!
#120
0!
#125
b101 >
b101 s
b101 y
b100000 ?
b100000 ,"
b100000 3"
b0 L
b0 +"
b0 K
b0 f"
b100000 @
b100000 ("
b100000 *"
b0 j
b0 i
b0 _"
b0 O"
b0 M"
b0 e"
b0 (
b0 E"
b0 K"
b0 J"
b0 +
b0 C"
b0 I"
b0 H"
b0 Q
b0 A"
b0 b"
b0 a"
b1011 9
b1011 0"
b1011 U"
b100000 <
b100000 n
b100000 '"
b100000 7"
b11100 =
b11100 o
b11100 ""
b11100 5"
b11100 6"
b11100 :
b11100 9"
b11100 ="
b0 N
b0 <"
11
b10 f
b10 x
b10 @"
1/
b11110 c
b11110 ~
b11110 T"
b11110 Y"
1!
#130
0!
#135
1$
b0 >
b0 s
b0 y
b0 e
b0 v
b0 S"
b100100 ?
b100100 ,"
b100100 3"
b11110 5
b11110 -"
b11110 G"
b0 9
b0 0"
b0 U"
b0 h
b0 t
b0 $"
b0 %
b0 q
b0 d"
b0 w
b100100 @
b100100 ("
b100100 *"
b11110 d
b11110 /"
b11110 Z"
b1011 6
b1011 k
b1011 V"
b1011 ]"
1-
b0 ,
b0 `"
b0 8
b0 1"
b0 P"
b0 )
b0 2"
b0 N"
b0 '
b0 &"
b0 F"
b0 W"
b0 *
b0 u
b0 D"
b0 P
b0 %"
b0 B"
b0 c"
b11100 _
b11100 p
b11100 Q"
b11100 ;
b11100 r
b11100 >"
b100000 :
b100000 9"
b100000 ="
b100100 <
b100100 n
b100100 '"
b100100 7"
b100000 =
b100000 o
b100000 ""
b100000 5"
b100000 6"
1!
#140
0!
#145
b101000 ?
b101000 ,"
b101000 3"
b101000 @
b101000 ("
b101000 *"
b101000 <
b101000 n
b101000 '"
b101000 7"
b100100 =
b100100 o
b100100 ""
b100100 5"
b100100 6"
b100100 :
b100100 9"
b100100 ="
b100000 _
b100000 p
b100000 Q"
b100000 ;
b100000 r
b100000 >"
b11100 ^
b11100 )"
b11100 R"
1#
b0 c
b0 ~
b0 T"
b0 Y"
b0 6
b0 k
b0 V"
b0 ]"
b0 &
b0 |
b0 X"
1.
b1011 7
b1011 l
b1011 L"
b1011 ^"
1!
#150
0!
#155
b101100 ?
b101100 ,"
b101100 3"
b0 5
b0 -"
b0 G"
b101100 @
b101100 ("
b101100 *"
b0 7
b0 l
b0 L"
b0 ^"
b0 d
b0 /"
b0 Z"
b100000 ^
b100000 )"
b100000 R"
b100100 _
b100100 p
b100100 Q"
b100100 ;
b100100 r
b100100 >"
b101000 :
b101000 9"
b101000 ="
b101100 <
b101100 n
b101100 '"
b101100 7"
b101000 =
b101000 o
b101000 ""
b101000 5"
b101000 6"
1!
#160
0!
#165
b110000 ?
b110000 ,"
b110000 3"
b110000 @
b110000 ("
b110000 *"
b110000 <
b110000 n
b110000 '"
b110000 7"
b101100 =
b101100 o
b101100 ""
b101100 5"
b101100 6"
b101100 :
b101100 9"
b101100 ="
b101000 _
b101000 p
b101000 Q"
b101000 ;
b101000 r
b101000 >"
b100100 ^
b100100 )"
b100100 R"
1!
#170
0!
#175
b110100 ?
b110100 ,"
b110100 3"
b110100 @
b110100 ("
b110100 *"
b101000 ^
b101000 )"
b101000 R"
b101100 _
b101100 p
b101100 Q"
b101100 ;
b101100 r
b101100 >"
b110000 :
b110000 9"
b110000 ="
b110100 <
b110100 n
b110100 '"
b110100 7"
b110000 =
b110000 o
b110000 ""
b110000 5"
b110000 6"
1!
#180
0!
#185
b111000 ?
b111000 ,"
b111000 3"
b111000 @
b111000 ("
b111000 *"
b111000 <
b111000 n
b111000 '"
b111000 7"
b110100 =
b110100 o
b110100 ""
b110100 5"
b110100 6"
b110100 :
b110100 9"
b110100 ="
b110000 _
b110000 p
b110000 Q"
b110000 ;
b110000 r
b110000 >"
b101100 ^
b101100 )"
b101100 R"
1!
#190
0!
#195
b111100 ?
b111100 ,"
b111100 3"
b111100 @
b111100 ("
b111100 *"
b110000 ^
b110000 )"
b110000 R"
b110100 _
b110100 p
b110100 Q"
b110100 ;
b110100 r
b110100 >"
b111000 :
b111000 9"
b111000 ="
b111100 <
b111100 n
b111100 '"
b111100 7"
b111000 =
b111000 o
b111000 ""
b111000 5"
b111000 6"
1!
#200
0!
